#+title: literate guide to pointers and references in cpp


* String variables
this is the obvious case. we create a string in much the same way we created any
other object. unlike C we do not need to tell the compiler that a string is a
pointer to a series of chars that are null terminated, instead, string
std::string handles that for us.

#+begin_src cpp
#include <iostream>

int main(void)
{
std::string var = "HI THIS IS BRAIN";
std::cout << var << std::endl;
}

#+end_src

#+RESULTS:
: HI THIS IS BRAIN

* string pointers

a pointer is created much like it is in C, we just add the astersik. we need to
this time pass the address of the string object if we want it to point towards
our string.


#+begin_src cpp :results value verbatim
#include <iostream>

int main(void)
{
std::string var = "HI THIS IS BRAIN";

std::string *stringPTR = &var;
std::string &stringREF = var;



// print memory address of string variable

std::cout << "address of var:" << std::endl;
std::cout << &var << std::endl;

// print memory address of stringPTR
std::cout << "address held by stringPTR:" << std::endl;
std::cout << stringPTR << std::endl;

// print memory address of stringREF
std::cout << "address held by stringREF:" << std::endl;
std::cout << &stringREF << std::endl;


std::cout << "var content:" << std::endl;
std::cout << var << std::endl;

std::cout << "stringPTR content:" << std::endl;
std::cout << *stringPTR << std::endl;

std::cout << "stringREF content:" << std::endl;
std::cout << stringREF << std::endl;
}
#+end_src

#+RESULTS:
#+begin_example
address of var:
0x7fff235edde0
address held by stringPTR:
0x7fff235edde0
address held by stringREF:
0x7fff235edde0
var content:
HI THIS IS BRAIN
stringPTR content:
HI THIS IS BRAIN
stringREF content:
HI THIS IS BRAIN
#+end_example
